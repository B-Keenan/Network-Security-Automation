# Description:
# - Retrieve and compile data into the monthly service report template.
#
# Variables used in this playbook:
# ansible_ssh_pass, ansible_host, ansible_user, file_path, inventory_hostname, ihealth_basic, customer_name
# Explanation of custom variables:
# - file_path: file location of where to store the downloaded files, and location of the report template.
# - ihealth_basic: ihealth api access token, valid for 180 days, used to obtain the bearer token.
# - customer_name: customer name/id as defined in the hosts file.
---
- name: Create service report
  hosts: F5_Lab
  gather_facts: False

  collections:
    - f5networks.f5_modules

  vars:

    provider:
      password: "{{ ansible_ssh_pass }}"
      server: "{{ ansible_host }}"
      user: "{{ ansible_user }}"
      validate_certs: False

  tasks:

    - name: Register date
      command: date "+%F"
      register: date
      delegate_to: localhost

    - name: Generate qkview
      bigip_qkview:
        exclude_core: true
        dest: "{{ file_path + inventory_hostname + '.qkview' }}"
        provider:
          "{{ provider }}"
      delegate_to: localhost

    - name: Generate API access token
      # Client ID and Secret are valid for 6 months.
      # Auth token is valid for 30 mins.
      shell: |
        curl --request POST --url https://identity.account.f5.com/oauth2/ausp95ykc80HOU7SQ357/v1/token -H "accept: application/json" -H "authorization: Basic "{{ ihealth_basic }}"" -H "cache-control: no-cache" -H "content-type: application/x-www-form-urlencoded" --data "grant_type=client_credentials&scope=ihealth"
      register: payload
      delegate_to: localhost

    - set_fact:
        bearer_token: "{{ payload.stdout }}"

    - name: Upload qkview to ihealth
      shell: |
        curl --request POST --url https://ihealth2-api.f5.com/qkview-analyzer/api/qkviews?visible_in_gui=true -H "Authorization: Bearer "{{ bearer_token.access_token }}"" -H "Accept: application/vnd.f5.ihealth.api" --user-agent "AnsibleClient" -o - -F qkview=@""{{ file_path + inventory_hostname + '.qkview' }}""
      register: response_message
      delegate_to: localhost

    - set_fact:
        qkview_id: "{{ response_message.stdout | regex_search('<id>([0-9]+)</id>', '\\1') }}"

    - wait_for:
        # Wait for qkview to be processed.
        timeout: 300
      delegate_to: localhost

    - name: Download diagnostics pdf
      shell: |
        curl --url https://ihealth2-api.f5.com/qkview-analyzer/api/qkviews/"{{ qkview_id[0] }}"/diagnostics.pdf -H "Authorization: Bearer "{{ bearer_token.access_token }}"" -H "Accept: application/vnd.f5.ihealth.api" --user-agent "AnsibleClient" --output "{{ file_path + inventory_hostname + '-diagnostics.pdf' }}"
      delegate_to: localhost

    - name: Download memory graph
      shell: |
        curl --url https://ihealth2-api.f5.com/qkview-analyzer/api/qkviews/"{{ qkview_id[0] }}"/graphs/memory?timespan=30 -H "Authorization: Bearer "{{ bearer_token.access_token }}"" -H "Accept: application/vnd.f5.ihealth.api" --user-agent "AnsibleClient" --output "{{ file_path + inventory_hostname + '-memory.png' }}"
      delegate_to: localhost
    
    - name: Download CPU graph
      shell: |
        curl --url https://ihealth2-api.f5.com/qkview-analyzer/api/qkviews/"{{ qkview_id[0] }}"/graphs/CPU?timespan=30 -H "Authorization: Bearer "{{ bearer_token.access_token }}"" -H "Accept: application/vnd.f5.ihealth.api" --user-agent "AnsibleClient" --output "{{ file_path + inventory_hostname + '-CPU.png' }}"
      delegate_to: localhost

    - name: Download blade 0 CPU graph
      shell: |
        curl --url https://ihealth2-api.f5.com/qkview-analyzer/api/qkviews/"{{ qkview_id[0] }}"/graphs/blade0cpucores?timespan=30 -H "Authorization: Bearer "{{ bearer_token.access_token }}"" -H "Accept: application/vnd.f5.ihealth.api" --user-agent "AnsibleClient" --output "{{ file_path + inventory_hostname + '-blade0cpucores.png' }}"
      delegate_to: localhost

    - name: Download throughput graph
      shell: |
        curl --url https://ihealth2-api.f5.com/qkview-analyzer/api/qkviews/"{{ qkview_id[0] }}"/graphs/throughput?timespan=30 -H "Authorization: Bearer "{{ bearer_token.access_token }}"" -H "Accept: application/vnd.f5.ihealth.api" --user-agent "AnsibleClient" --output "{{ file_path + inventory_hostname + '-throughput.png' }}"
      delegate_to: localhost

    # Report template; save as a new file when editing.
    - set_fact:
        docx_template: '{{ file_path }}F5MonthlyReport-Template.docx'

    - set_fact:
        png_files:
          - "{{ file_path + inventory_hostname + '-memory.png' }}"
          - "{{ file_path + inventory_hostname + '-CPU.png' }}"
          - "{{ file_path + inventory_hostname + '-blade0cpucores.png' }}"
          - "{{ file_path + inventory_hostname + '-throughput.png' }}"

    - name: Verify required packages are installed
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - python3
        - python3-pip
      delegate_to: localhost

    - name: Install required Python packages
      pip:
        name: python-docx
        executable: pip3
      delegate_to: localhost

    - name: Create a python script to insert images into a docx file
      copy:
        dest: '{{ file_path }}insert_images.py'
        content: |
          from docx import Document
          from docx.shared import Inches

          docx_path = '{{ docx_template }}'
          search_string = 'The performance graphs will show memory used, CPU usage and throughput(bits).'
          images = {{ png_files | to_json }}

          def insert_images_into_docx(docx_path, search_string, images):
            doc = Document(docx_path)

            found = False

            for paragraph in doc.paragraphs:
              if search_string in paragraph.text:
                # Find the index where the string occurs
                start_idx = paragraph.text.find(search_string)
                # Append device name and images after the found string
                paragraph.text = paragraph.text[:start_idx + len(search_string)] + '\n\n' + "{{ inventory_hostname }}"

                for image in images:
                  paragraph.add_run().add_picture(image, width=Inches(6.0))

                found = True
            
            if found:
              # Save the modified document
              doc.save('{{ file_path }}' + 'F5MonthlyReport-' + '{{ inventory_hostname }}' + '.docx')
              print(f"The document has been modified and saved as F5MonthlyReport-{{ inventory_hostname }}.docx.")
            else:
              print(f"'{search_string}' not found in the document.")

          insert_images_into_docx(docx_path, search_string, images)
      delegate_to: localhost
    
    - name: Run python script
      command: "{{ 'python3 ' + file_path + 'insert_images.py' }}"
      delegate_to: localhost
    
    - set_fact:
        modified_docx: "{{ file_path + 'F5MonthlyReport-' + inventory_hostname + '.docx' }}"

    - set_fact:
        diag_pdf: "{{ file_path + inventory_hostname + '-diagnostics.pdf' }}"

    - name: Install required Python packages
      pip:
        name: pdf2image
        executable: pip3
      delegate_to: localhost
    
    - name: Create a python script to insert pdf pages into a docx file
      copy:
        dest: '{{ file_path }}insert_diag_pdf.py'
        content: |
          from pdf2image import convert_from_path
          from docx import Document
          from docx.shared import Inches
          import os

          report_docx = '{{ modified_docx }}'
          diag_pdf = '{{ diag_pdf }}'
          search_string = 'Then upload the qkview to ihealth https://ihealth.f5.com/'

          def attach_pdf_to_docx(report_docx, diag_pdf, search_string):
            # Load the DOCX file
            doc = Document(report_docx)

            images = convert_from_path(diag_pdf)
            
            found = False

            for paragraph in doc.paragraphs:
              if search_string in paragraph.text:
                # Find the index where the string occurs
                start_idx = paragraph.text.find(search_string)
                # Append device name after the found string
                paragraph.text = paragraph.text[:start_idx + len(search_string)] + '\n\n'

                for i, image in enumerate(images):
                  image_path = f"page_{i+1}.png"
                  image.save(image_path, 'PNG')

                  paragraph.add_run().add_picture(image_path, width=Inches(6))

                  if i < len(images) - 1:
                    doc.add_page_break()

                  os.remove(image_path)

                found = True
                
            if found:
              # Save the modified document
              doc.save('{{ file_path }}' + 'F5MonthlyReport-' + '{{ inventory_hostname }}' + '.docx')
              print(f"The document has been modified and saved as F5MonthlyReport-{{ inventory_hostname }}.docx.")
            else:
              print(f"'{search_string}' not found in the document.")
              
          attach_pdf_to_docx(report_docx, diag_pdf, search_string)
      delegate_to: localhost
    
    - name: Run python script
      command: "{{ 'python3 ' + file_path + 'insert_diag_pdf.py' }}"
      delegate_to: localhost
    
    - name: Create a python script to replace text in a docx file
      copy:
        dest: '{{ file_path }}replace_text_in_docx.py'
        content: |
          from docx import Document
          import sys

          report_docx = "{{ file_path + 'F5MonthlyReport-' + inventory_hostname + '.docx' }}"
          search_name = "<customer>"
          search_date = "<date>"
          replace_name = "{{ customer_name }}"
          replace_date = "{{ date.stdout }}"

          def replace_text_in_docx(report_docx, search_name, search_date, replace_name, replace_date):
            doc = Document(report_docx)
            for paragraph in doc.paragraphs:
                if search_name in paragraph.text:
                    paragraph.text = paragraph.text.replace(search_name, replace_name)
                if search_date in paragraph.text:
                    paragraph.text = paragraph.text.replace(search_date, replace_date)
            doc.save('{{ file_path }}' + 'F5MonthlyReport-' + '{{ inventory_hostname }}' + '.docx')
          
          replace_text_in_docx(report_docx, search_name, search_date, replace_name, replace_date)
      delegate_to: localhost

    - name: Run python script
      command: "{{ 'python3 ' + file_path + 'replace_text_in_docx.py' }}"
      delegate_to: localhost