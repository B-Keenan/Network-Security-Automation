# Upgrade will be performed on a single host.
# Not for DNS or vCMP configurations.
#
# Tested versions:
# 15.1.5.x : 15.1.6.x -> 15.1.7
# 16.1.3.x -> 16.1.3.2
# 16.1.4.x -> 17.1.1.3
#
# Sample cli usage:
# ansible-playbook ltmStandaloneUpgrade.yml -i hosts
#
# Sample crontab usage:
# Run at 12pm on 15/11: 
#SHELL=/bin/bash
#0 12 15 11 * cd /home/socadmin/F5-env/ansible2.12.3 && source bin/activate && bin/ansible-playbook playbooks/ltmStandaloneUpgrade.yml > /opt/ansible/logs/ltmStandaloneUpgrade.log 2>&1

---
- name: F5 BIG-IP TMOS Upgrade
  hosts: bigipdns.example.com
  gather_facts: False
  any_errors_fatal: true

  collections:
    - f5networks.f5_modules

  vars:

    provider:
      password: "{{ ansible_ssh_pass }}"
      server: "{{ ansible_host }}"
      user: "{{ ansible_user }}"
      validate_certs: False
    
    upgrade_iso: "BIGIP-17.1.1.3-0.0.5.iso"

  tasks:
    
    - name: Register Partitions
      shell: tmsh list auth partition | grep "auth partition" | awk '{print $3}'
      register: partitions

    - name: Register current boot volume name
      shell: tmsh show sys software status | grep yes | grep -v no | awk '{print $1}'
      register: cur_vol
    
    - name: Register date on BIG-IP
      command: date "+%F"
      register: date

    - name: Register failover state
      command: cat /var/prompt/ps1
      register: failover_state

    - block:

      - name: Increase iControl process timeout values
        shell: |
          tmsh modify sys db icrd.timeout value 180
          tmsh modify sys db restjavad.timeout value 180
          tmsh modify sys db restnoded.timeout value 180

      - name: Save running configuration
        bigip_config:
          save: yes
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Restart restjavad restnoded
        command: tmsh restart sys service restjavad restnoded

      - name: Wait...
        wait_for:
          timeout: 30
        delegate_to: localhost

      - name: Gather pre-upgrade config facts
        bigip_device_info:
          partition: "{{ item }}"
          gather_subset:
            - virtual-servers
            - ltm-pools
            - self-ips
            - vlans
          provider: "{{ provider }}"
        loop: "{{ partitions.stdout_lines }}"
        register: f5_info
        delegate_to: localhost

      - name: Pre-upgrade parse
        set_fact:
          startvirtstats: "{{ f5_info.results | map(attribute='virtual_servers') | flatten
            | items2dict(key_name='full_path', value_name='availability_status') }}"
          startpoolstats: "{{ f5_info.results | map(attribute='ltm_pools') | flatten
            | items2dict(key_name='full_path', value_name='availability_status') }}"
          startselfstats: "{{ f5_info.results | map(attribute='self_ips') | flatten
            | items2dict(key_name='full_path', value_name='vlan') }}"
          startvlanstats: "{{ f5_info.results | map(attribute='vlans') | flatten
            | items2dict(key_name='full_path', value_name='tag') }}"
      
      # Comment out this task if no connectivity to callhome or activate.f5.com.
      - name: Reactivate License
        shell: SOAPLicenseClient --basekey $(perl -ane 'print $F[3] if /^Registration Key/' /config/bigip.license)      
      
      - name: Wait for configuration to finish loading
        wait_for:
          timeout: 120
        delegate_to: localhost
      
      - name: Download and store a new UCS
        bigip_ucs_fetch:
          async_timeout: 1800
          src: "{{ inventory_hostname + '-' + date.stdout +  '-backup.ucs' }}"
          dest: "{{ '/opt/ansible/backups/' + inventory_hostname + '-' + date.stdout +  '-backup.ucs' }}"
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Remove UCS on the F5
        bigip_ucs:
          ucs: "{{ inventory_hostname + '-' + date.stdout +  '-backup.ucs' }}"
          state: absent
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Upload upgrade image
        bigip_software_image:
          image: "{{ '/opt/ansible/images/' + upgrade_iso }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Wait for image to become available
        wait_for:
          timeout: 30
        delegate_to: localhost
      
      #- name: Get available volume number to use
        #script: /opt/ansible/scripts/get_vol_number.bash
        #register: vol
      - name: Get available volume number to use
        shell: tmsh show sys software status | grep no | awk '{print $1}' | head -1
        register: vol
      
      - name: Install BIG-IP software
        bigip_software_install:
          image: "{{ upgrade_iso }}"
          state: activated
          volume: "{{ vol.stdout }}"
          provider: "{{ provider }}"
        delegate_to: localhost
      
      - name: Wait for device to return to Active
        wait_for:
          path: /var/prompt/ps1
          search_regex: Active

      - name: Allow some time for health monitoring to finish
        wait_for:
          # The timeout should be more than the maximum health monitor timeout to allow Unknown states to change to Offline.
          timeout: 300
        delegate_to: localhost
      
      - block:
          - name: Gather post-upgrade config facts
            bigip_device_info:
              partition: "{{ item }}"
              gather_subset:
                - virtual-servers
                - ltm-pools
                - self-ips
                - vlans
              provider: "{{ provider }}"
            loop: "{{ partitions.stdout_lines }}"
            register: f5_info
            delegate_to: localhost

          - name: Post-upgrade parse
            set_fact:
              endvirtstats: "{{ f5_info.results | map(attribute='virtual_servers') | flatten
                | items2dict(key_name='full_path', value_name='availability_status') }}"
              endpoolstats: "{{ f5_info.results | map(attribute='ltm_pools') | flatten
                | items2dict(key_name='full_path', value_name='availability_status') }}"
              endselfstats: "{{ f5_info.results | map(attribute='self_ips') | flatten
                | items2dict(key_name='full_path', value_name='vlan') }}"
              endvlanstats: "{{ f5_info.results | map(attribute='vlans') | flatten
                | items2dict(key_name='full_path', value_name='tag') }}"
          
          - name: Check Virtual Servers
            assert:
              that:
                - item.value == endvirtstats[item.key]
              fail_msg: "Virtual server '{{ item.key }}' state changed from '{{ item.value }}' to '{{ endvirtstats[item.key] }}'"
              success_msg: "{{ item.key }} state unchanged"
              quiet: yes
            loop: "{{ startvirtstats|dict2items }}"
            loop_control:
              label: "{{ item.key }}"

          - name: Check Pools
            assert:
              that:
                - item.value == endpoolstats[item.key]
              fail_msg: "Pool '{{ item.key }}' state changed from '{{ item.value }}' to '{{ endpoolstats[item.key] }}'"
              success_msg: "{{ item.key }} state unchanged"
              quiet: yes
            loop: "{{ startpoolstats|dict2items }}"
            loop_control:
              label: "{{ item.key }}"

          - name: Check Self-IPs
            assert:
              that:
                - item.value == endselfstats[item.key]
              fail_msg: "Self IP '{{ item.key }}' state changed from '{{ item.value }}' to '{{ endselfstats[item.key] }}'"
              success_msg: "{{ item.key }} state unchanged"
              quiet: yes
            loop: "{{ startselfstats|dict2items }}"
            loop_control:
              label: "{{ item.key }}"

          - name: Check VLANs
            assert:
              that:
                - item.value == endvlanstats[item.key]
              fail_msg: "VLAN '{{ item.key }}' state changed from '{{ item.value }}' to '{{ endvlanstats[item.key] }}'"
              success_msg: "{{ item.key }} state unchanged"
              quiet: yes
            loop: "{{ startvlanstats|dict2items }}"
            loop_control:
              label: "{{ item.key }}"

        rescue:
          - name: Post checks failed, rolling back and exiting play
            command: tmsh reboot volume "{{ cur_vol.stdout }}"

          - name: Send email notification
            mail:
              host: smtp.scmp.host
              port: 25
              to: ben.keenan@example.com
              from: ansible-cm1@example.com
              subject: 'Post checks failed for "{{ inventory_hostname }}"'
              body: 'Device "{{ inventory_hostname }}" has mismatch of object state for either Virtual Servers, Pools, Self IPs or VLAN tag IDs. Check logs for more details /opt/ansible/logs/ltmClusterUpgrade.log and verify the states are the same as the active.'
            delegate_to: localhost
          
          - meta: end_play
          
      - name: Backup new version configuration
        bigip_ucs_fetch:
          async_timeout: 1800
          src: "{{ inventory_hostname + '-' + date.stdout +  '-post-upgrade-backup.ucs' }}"
          dest: "{{ '/opt/ansible/backups/' + inventory_hostname + '-' + date.stdout +  '-post-upgrade-backup.ucs' }}"
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Remove UCS on F5
        bigip_ucs:
          ucs: "{{ inventory_hostname + '-' + date.stdout +  '-post-upgrade-backup.ucs' }}"
          state: absent
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Send a success email notification
        mail:
          host: smtp.scmp.host
          port: 25
          to: ben.keenan@example.com
          from: ansible-cm1@example.com
          subject: 'Upgrade completed for "{{ inventory_hostname }}"'
          body: 'Host "{{ inventory_hostname }}" was successfully upgraded'
        delegate_to: localhost

      rescue:
        - name: Upgrade failed
          mail:
            host: smtp.scmp.host
            port: 25
            to: ben.keenan@example.com
            from: ansible-cm1@example.com
            subject: 'Upgrade failed for "{{ inventory_hostname }}"'
            body: 'Upgrade failed for device "{{ inventory_hostname }}". No further action has been taken. Check log file for more #details /opt/ansible/logs/ltmClusterUpgrade.log'
          delegate_to: localhost
        
        - meta: end_play
      
      when: "'Active' in failover_state.stdout"
...